type: edu
files:
- name: src/life/Main.java
  visible: true
  text: |
    package life;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/GameOfLifeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.List;


    public class GameOfLifeTest extends StageTest<String> {

        int[] sizes = {5, 6, 7, 8, 9, 10};

        @DynamicTest(data = "sizes")
        CheckResult test(int size) {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute(String.valueOf(size));

            if (output.isEmpty()) {
                return CheckResult.wrong("Looks like your output is empty!");
            }

            if (!output.toLowerCase().contains("generation")) {
                return CheckResult.wrong("Can't find 'Generation' word in the output!");
            }

            String[] generations = output.toLowerCase().split("generation");

            if (generations.length < 11) {
                return CheckResult.wrong("Your output should contain not less than 10 generations!");
            }

            List<Generation> generationsList = Generation.getGenerations(generations, size);

            Generation.isCorrectGenerationsList(generationsList);

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: test/Generation.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;
    import java.util.stream.Collectors;

    public class Generation {

        private static final Pattern pattern = Pattern.compile("alive:(\\s+)?(\\d+)", Pattern.MULTILINE);
        private final boolean[][] cells;
        private final int size;


        public Generation(List<String> lines) {

            size = lines.size();
            cells = new boolean[size][size];

            for (int i = 0; i < lines.size(); i++) {
                for (int j = 0; j < lines.size(); j++) {
                    cells[i][j] = lines.get(i).charAt(j) == 'o';
                }
            }
        }

        public static List<Generation> getGenerations(String[] generationsFromOutput, int correctSize) {

            List<Generation> generations = new ArrayList<>();

            for (int i = 1; i < generationsFromOutput.length; i++) {
                String generation = generationsFromOutput[i].toLowerCase();

                Matcher matcher = pattern.matcher(generation);

                if (!matcher.find()) {
                    throw new WrongAnswer("Can't find number of Alive cells in the generation with number "
                            + (i + 1) + ".\nYour output should contain 'Alive: DDD', where D is a digit!");
                }

                int aliveFromOutput = Integer.parseInt(matcher.group(2));

                List<String> lines = Arrays.stream(generation.split("\n"))
                        .filter(line -> !line.contains("alive") && !line.contains("#") && !line.isEmpty())
                        .collect(Collectors.toList());

                if (lines.size() != correctSize) {
                    throw new WrongAnswer("Generation #" + (i + 1) + " map size is wrong!\nYour size: " + lines.size() + "\n" +
                            "Expected size: " + correctSize);
                }

                int activeCellsInGeneration = (int) lines.stream().map(line -> line.split("")).flatMap(cells -> Arrays.stream(cells.clone())).filter(cell -> cell.equals("o")).count();

                if (activeCellsInGeneration != aliveFromOutput) {
                    throw new WrongAnswer("Active cells in the generation #" + (i + 1) + ": " + activeCellsInGeneration + "\n" +
                            "Your output: 'Alive: " + aliveFromOutput + "'");
                }

                for (String line : lines) {
                    if (line.length() != correctSize) {
                        throw new WrongAnswer("Generation map size is wrong!\nYour size: " + lines.size() + "\n" +
                                "Expected size: " + correctSize + "\nMake sure you don't print extra spaces at the end of the lines!");
                    }
                }

                generations.add(new Generation(lines));
            }

            return generations;
        }

        public boolean isCorrectNextGeneration(Generation generation) {

            if (generation.size != size) {
                return false;
            }

            for (int i = 0; i < size; i++) {
                for (int j = 0; j < size; j++) {

                    int numberOfNeighbours = 0;

                    int up = i - 1 < 0 ? size - 1 : i - 1;
                    int down = i + 1 == size ? 0 : i + 1;
                    int right = j + 1 == size ? 0 : j + 1;
                    int left = j - 1 < 0 ? size - 1 : j - 1;

                    if (cells[up][left]) numberOfNeighbours++;
                    if (cells[up][j]) numberOfNeighbours++;
                    if (cells[up][right]) numberOfNeighbours++;
                    if (cells[i][left]) numberOfNeighbours++;
                    if (cells[i][right]) numberOfNeighbours++;
                    if (cells[down][left]) numberOfNeighbours++;
                    if (cells[down][j]) numberOfNeighbours++;
                    if (cells[down][right]) numberOfNeighbours++;

                    if ((numberOfNeighbours < 2 || numberOfNeighbours > 3) && generation.cells[i][j]) {
                        return false;
                    }
                }
            }
            return true;
        }


        public static void isCorrectGenerationsList(List<Generation> generations) {

            if (generations.size() <= 1) {
                return;
            }

            for (int i = 1; i < generations.size(); i++) {
                if (!generations.get(i - 1).isCorrectNextGeneration(generations.get(i))) {
                    throw new WrongAnswer("Generation #" + (i + 1) + " is wrong!");
                }
            }
        }
    }
  learner_created: false
- name: src/life/Evolution.java
  visible: true
  text: |
    package life;

    public class Evolution {

        Universe newUniverse;
        Universe baseUniverse;
        int generations;
        public Evolution(Universe baseUniverse, Universe newUniverse,int generations) {
            this.baseUniverse = baseUniverse;
            this.newUniverse = newUniverse;
            this.generations = generations;
        }

        public void evolutionGo() {
            for (int i = 0; i < this.generations; i++) {
                calculateNewUniverse();
            }

            System.out.println(this.newUniverse.toString());
        }

        private void calculateNewUniverse() {
            Universe universe = this.baseUniverse;
            Universe newUniverse = this.newUniverse;
            String[][] currentUniverse = universe.universe;
            String[][] newUniverseArray = newUniverse.universe;
            int numberOfNeighbours;
            for (int i = 0; i < universe.size; i++) {
                for (int j = 0; j < universe.size; j++) {
                    numberOfNeighbours = findNumberOfNeighbours(currentUniverse, i, j);
                    if (numberOfNeighbours < 2 || numberOfNeighbours > 3) {
                        newUniverseArray[i][j] = " ";
                    } else if ((numberOfNeighbours == 2 || numberOfNeighbours == 3) && currentUniverse[i][j].equals("O")) {
                        newUniverseArray[i][j] = "O";
                    } else if (currentUniverse[i][j].equals(" ") && numberOfNeighbours == 3) {
                        newUniverseArray[i][j] = "O";
                    }
                }
            }
            this.baseUniverse.saveState(newUniverseArray);
        }

        private int findNumberOfNeighbours(String[][] currentUniverse, int row, int column) {
            int numberOfNeighbours = 0;
            int newRow;
            int newColumn;
            int size = currentUniverse.length;
            for (int i = -1; i <= 1; i++) {
                for (int j = -1; j <= 1; j++) {
                    newRow = row + i;
                    newColumn = column + j;

                    if(newRow < 0) {
                        newRow = size - 1;
                    }

                    if(newRow >= size) {
                        newRow = 0;
                    }

                    if(newColumn < 0) {
                        newColumn = size - 1;
                    }

                    if(newColumn >= size) {
                        newColumn = 0;
                    }

                    if(currentUniverse[newRow][newColumn].equals("O") && !(newRow == row && newColumn == column)){
                        numberOfNeighbours++;
                    }
                }
            }
            return numberOfNeighbours;
        }
    }
  learner_created: true
- name: src/life/Universe.java
  visible: true
  text: |
    package life;

    import java.util.Arrays;
    import java.util.Random;

    public class Universe {
        String [][]universe;
        int seed;

        int size;

        public Universe(int seed, int size) {
            this.seed = seed;
            this.size = size;
            createUniverse(seed, size);
        }

        public String[][] getUniverse() {
            return universe;
        }

        @Override
        public String toString() {
            String printedUniverse = "";
            String [][]universe = this.universe;
            for (int i = 0; i < this.size; i++) {
                for (int j = 0; j < this.size; j++) {
                    printedUniverse += universe[i][j];
                }
                printedUniverse +="\n";
            }
            return printedUniverse;
        }

        public void setUniverse(String[][] universe) {
            this.universe = universe;
        }

        public void saveState(String[][] universe) {
            int size = this.size;
            String[][] newUniverse = new String[size][size];

            for (int i = 0; i < size; i++) {
                for (int j = 0; j < size; j++) {
                    newUniverse[i][j] = universe[i][j];
                }
            }
            this.setUniverse(newUniverse);
        }

        public int getSeed() {
            return seed;
        }

        public void setSeed(int seed) {
            this.seed = seed;
        }

        public int getSize() {
            return size;
        }

        public void setSize(int size) {
            this.size = size;
        }

        void createUniverse(int seed, int size) {

            Random rand = new Random(seed);
            String[][] universe = new String[size][size];

            for (int i = 0; i < size; i++) {
                for (int j = 0; j < size; j++) {
                    universe[i][j] = rand.nextBoolean() ? "O" : " ";
                }
            }

            setUniverse(universe);
        }
    }
  learner_created: true
- name: src/life/Book.java
  visible: true
  text: |
    package life;

    class Book {

        private String title;
        private int yearOfPublishing;
        private String[] authors;


    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5438#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Thu, 09 Mar 2023 20:07:32 UTC"
record: 3
